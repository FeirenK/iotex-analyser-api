// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountVoteServiceClient is the client API for AccountVoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountVoteServiceClient interface {
	GetVoteByHeight(ctx context.Context, in *AccountVoteRequest, opts ...grpc.CallOption) (*AccountVoteResponse, error)
}

type accountVoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountVoteServiceClient(cc grpc.ClientConnInterface) AccountVoteServiceClient {
	return &accountVoteServiceClient{cc}
}

func (c *accountVoteServiceClient) GetVoteByHeight(ctx context.Context, in *AccountVoteRequest, opts ...grpc.CallOption) (*AccountVoteResponse, error) {
	out := new(AccountVoteResponse)
	err := c.cc.Invoke(ctx, "/api.AccountVoteService/GetVoteByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountVoteServiceServer is the server API for AccountVoteService service.
// All implementations must embed UnimplementedAccountVoteServiceServer
// for forward compatibility
type AccountVoteServiceServer interface {
	GetVoteByHeight(context.Context, *AccountVoteRequest) (*AccountVoteResponse, error)
	mustEmbedUnimplementedAccountVoteServiceServer()
}

// UnimplementedAccountVoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountVoteServiceServer struct {
}

func (UnimplementedAccountVoteServiceServer) GetVoteByHeight(context.Context, *AccountVoteRequest) (*AccountVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoteByHeight not implemented")
}
func (UnimplementedAccountVoteServiceServer) mustEmbedUnimplementedAccountVoteServiceServer() {}

// UnsafeAccountVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountVoteServiceServer will
// result in compilation errors.
type UnsafeAccountVoteServiceServer interface {
	mustEmbedUnimplementedAccountVoteServiceServer()
}

func RegisterAccountVoteServiceServer(s grpc.ServiceRegistrar, srv AccountVoteServiceServer) {
	s.RegisterService(&AccountVoteService_ServiceDesc, srv)
}

func _AccountVoteService_GetVoteByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountVoteServiceServer).GetVoteByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AccountVoteService/GetVoteByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountVoteServiceServer).GetVoteByHeight(ctx, req.(*AccountVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountVoteService_ServiceDesc is the grpc.ServiceDesc for AccountVoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountVoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AccountVoteService",
	HandlerType: (*AccountVoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVoteByHeight",
			Handler:    _AccountVoteService_GetVoteByHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_account_vote.proto",
}
